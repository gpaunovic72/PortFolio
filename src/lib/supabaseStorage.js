import { supabase } from "./supabase";

// Configuration du bucket pour les images
const BUCKET_NAME = "portfolio-images";

// Fonctions pour g√©rer les images
export const uploadImage = async (file, fileName) => {
  try {
    console.log("üì§ Upload de l'image:", fileName);

    const { data, error } = await supabase.storage
      .from(BUCKET_NAME)
      .upload(fileName, file, {
        cacheControl: "3600",
        upsert: false, // Ne pas √©craser si l'image existe d√©j√†
      });

    if (error) {
      console.error("‚ùå Erreur upload:", error);
      throw error;
    }

    console.log("‚úÖ Image upload√©e avec succ√®s:", data.path);
    return data;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'upload:", error);
    throw error;
  }
};

// R√©cup√©rer l'URL publique d'une image
export const getImageUrl = (fileName) => {
  const { data } = supabase.storage.from(BUCKET_NAME).getPublicUrl(fileName);

  return data.publicUrl;
};

// Lister toutes les images
export const listImages = async () => {
  try {
    const { data, error } = await supabase.storage.from(BUCKET_NAME).list();

    if (error) {
      console.error("‚ùå Erreur liste images:", error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des images:", error);
    throw error;
  }
};

// Supprimer une image
export const deleteImage = async (fileName) => {
  try {
    const { error } = await supabase.storage
      .from(BUCKET_NAME)
      .remove([fileName]);

    if (error) {
      console.error("‚ùå Erreur suppression:", error);
      throw error;
    }

    console.log("‚úÖ Image supprim√©e:", fileName);
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression:", error);
    throw error;
  }
};
